/**
<<<<<<< HEAD
 * Catapult REST Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.16
=======
 * Catapult REST API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.15
>>>>>>> jwt
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
<<<<<<< HEAD
=======
/// <reference types="node" />
import http = require('http');
>>>>>>> jwt
import { MosaicIds } from '../model/mosaicIds';
import { MosaicInfoDTO } from '../model/mosaicInfoDTO';
import { MosaicNamesDTO } from '../model/mosaicNamesDTO';
import { Authentication } from '../model/models';
export declare enum MosaicRoutesApiApiKeys {
}
export declare class MosaicRoutesApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    basePath: string;
    setDefaultAuthentication(auth: Authentication): void;
<<<<<<< HEAD
=======
    setHeaders(headers: {}): void;
>>>>>>> jwt
    setApiKey(key: MosaicRoutesApiApiKeys, value: string): void;
    /**
     * Gets the mosaic definition for a given mosaicId.
     * @summary Get mosaic information
     * @param mosaicId The mosaic identifier.
     */
    getMosaic(mosaicId: string, options?: {
        headers: {
            [name: string]: string;
        };
<<<<<<< HEAD
    }): Promise<MosaicInfoDTO>;
=======
    }): Promise<{
        response: http.ClientResponse;
        body: MosaicInfoDTO;
    }>;
>>>>>>> jwt
    /**
     * Gets an array of mosaic definition.
     * @summary Get mosaics information for an array of mosaics
     * @param mosaicIds
     */
    getMosaics(mosaicIds: MosaicIds, options?: {
        headers: {
            [name: string]: string;
        };
<<<<<<< HEAD
    }): Promise<Array<MosaicInfoDTO>>;
=======
    }): Promise<{
        response: http.ClientResponse;
        body: Array<MosaicInfoDTO>;
    }>;
>>>>>>> jwt
    /**
     * Returns friendly names for mosaics.
     * @summary Get readable names for a set of mosaics
     * @param mosaicIds
     */
    getMosaicsNames(mosaicIds: MosaicIds, options?: {
        headers: {
            [name: string]: string;
        };
<<<<<<< HEAD
    }): Promise<Array<MosaicNamesDTO>>;
=======
    }): Promise<{
        response: http.ClientResponse;
        body: Array<MosaicNamesDTO>;
    }>;
>>>>>>> jwt
}
