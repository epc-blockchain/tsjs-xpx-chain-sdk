/**
 * Catapult REST API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.15
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http = require('http');
import { HashLockWithMeta } from '../model/hashLockWithMeta';
import { SecretLockWithMeta } from '../model/secretLockWithMeta';
import { Authentication, Interceptor } from '../model/models';
export declare enum LockRoutesApiApiKeys {
}
export declare class LockRoutesApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    useQuerystring: boolean;
    basePath: string;
    defaultHeaders: any;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: LockRoutesApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Get account lock hash.
     * @summary Get account lock hash
     * @param accountId The public key or address of the account.
     */
    getAccountLockHash(accountId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<HashLockWithMeta>;
    }>;
    /**
     * Get account lock secret.
     * @summary Get account lock secret
     * @param accountId The public key or address of the account.
     */
    getAccountLocksecret(accountId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<SecretLockWithMeta>;
    }>;
    /**
     * Get composite hash.
     * @summary Get composite hash
     * @param compositeHash The composite hash of account addres and secret.
     */
    getCompositeHash(compositeHash: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: SecretLockWithMeta;
    }>;
    /**
     * Get lock hash.
     * @summary Get lock hash
     * @param hash The hash.
     */
    getLockHash(hash: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: HashLockWithMeta;
    }>;
    /**
     * Get secret hash.
     * @summary Get secret hash
     * @param secret The proof hashed.
     */
    getSecretHash(secret: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: SecretLockWithMeta;
    }>;
}
