import { expect } from 'chai';
import { SecureMessage } from '../../../src/model/transaction/SecureMessage';

describe('SecureMessage', () => {
    it('should create secure message and decrypt message with sender private key ', () => {
        const payload = 'test-message';
        const senderPrivateKey = '4F03FDC5BCF3AE004FBEBF23D321DFE600FBB1B6739A7DAC45C58834EAD48193';
        const senderPublicKey = '2B36D62950AEF0170B0CC7ADC9615D7D96F8F54FF7BD7E783C17DBDFD55623A2';
        const recipientPrivateKey = 'B226CAEBCCA25566B2961023A8259A00EC7FCAFB2BAA408B78BB6E2E292E07C0';
        const recipientPublicKey = '633FD217940F7FEB21FF6477DEBF6ADECDA2891561276AFC393D979E14470B39';

        const secureMessage = SecureMessage.create(payload, recipientPublicKey, senderPrivateKey);

        const decodedMessagePayload = secureMessage.decrypt(recipientPublicKey, senderPrivateKey);

        expect(decodedMessagePayload).to.be.equal(payload);
    });

    it('should create secure message and decrypt message with receiver private key', () => {
        const payload = 'test-message';
        const senderPrivateKey = '4F03FDC5BCF3AE004FBEBF23D321DFE600FBB1B6739A7DAC45C58834EAD48193';
        const senderPublicKey = '2B36D62950AEF0170B0CC7ADC9615D7D96F8F54FF7BD7E783C17DBDFD55623A2';
        const recipientPrivateKey = 'B226CAEBCCA25566B2961023A8259A00EC7FCAFB2BAA408B78BB6E2E292E07C0';
        const recipientPublicKey = '633FD217940F7FEB21FF6477DEBF6ADECDA2891561276AFC393D979E14470B39';

        const secureMessage = SecureMessage.create(payload, senderPublicKey, recipientPrivateKey);

        const decodedMessagePayload = secureMessage.decrypt(senderPublicKey, recipientPrivateKey);

        expect(decodedMessagePayload).to.be.equal(payload);
    });

    /*
    it('should create secure message and decrypt message with receiver private key', () => {
        const payload = '43393945373644303138314638414445413530353534373239463345313346343339434343423336413031413339364541333731313842433446314134444146344443433930324237423946463634313738343037303941453846314433423844333044324244353732384541323846414143384332313843343738323842344139373730393742374437443345303030314331463637434639313241374544353731414344334142453746333535373437333832343332323042374641463834314345443632363134453835334143464144444244394631313439464333463539314433384641343630333339344631303034424342373043303944423734423541463037443838303837314232444336444136443039314639324430463044453234363031353537313041333535463735333946433839383430414144313733334435363241324439373131303741313235413738303933364438324232434536453433373342454146423746303831444344444530363636464346453734453641324130303835334342303945384233454332343330374239333834384139423142414131344133303337323335334638353742454233423938443935414644413045434232323135364236374639413643453232393331314445394643313146383433323334393946463632433337324435453334394245393035464133433638463442414242353846454635463333364630324642323939443344';
        const privateKey = '97226FCCBD876D399BA2A70E640AD2C2C97AD5CE57A40EE9455C226D3C39AD49';
        const publicKey = 'D1869362F4FAA5F683AEF78FC0D6E04B976833000F3958862A09CC7B6DF347C2';
        const secureMessage = SecureMessage.createFromDTO(Message.decodeHex(payload));
        console.log(secureMessage);
        const decodedMessagePayload = secureMessage.decrypt(publicKey, privateKey);
        console.log(decodedMessagePayload);
        //expect(decodedMessagePayload).to.be.equal(payload);
    });*/

});
